name: Validate and Optimize Files

on:
  pull_request:
    paths:
      - 'magica/**/*.json'
      - 'magica/**/*.plist'
      - 'magica/**/*.ExportJson.gz'
      - 'magica/**/*.jpg'
      - 'magica/**/*.png'
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Get Changed Files
        id: changed_files
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/base
          CHANGED_FILES=$(git diff --name-only origin/base...${{ github.sha }} | tr '\n' ' ')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Validate JSON Files
        id: validate_json
        run: |
          invalid_json_files=""
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.json ]]; then
              if ! jq empty "$file" 2>/dev/null; then
                NEWLINE=$'\n'
                invalid_json_files="$invalid_json_files$NEWLINE$file"
              fi
            fi
          done

          if [ -n "$invalid_json_files" ]; then
            {
              echo 'INVALID_FILES_JSON<<EOF'
              echo "$invalid_json_files"
              echo EOF
            } >> "$GITHUB_ENV"
            echo "Found invalid JSON files"
            echo "is_json_valid=false" >> $GITHUB_OUTPUT
          else
            echo "is_json_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate XML Files
        id: validate_xml
        run: |
          invalid_xml_files=""
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.plist ]]; then
              if ! xmllint --noout "$file" 2>/dev/null; then
                NEWLINE=$'\n'
                invalid_xml_files="$invalid_xml_files$NEWLINE$file"
              fi
            fi
          done

          if [ -n "$invalid_xml_files" ]; then
            {
              echo 'INVALID_FILES_XML<<EOF'
              echo "$invalid_xml_files"
              echo EOF
            } >> "$GITHUB_ENV"
            echo "Found invalid XML files"
            echo "is_xml_valid=false" >> $GITHUB_OUTPUT
          else
            echo "is_xml_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate gzipped JSON Files
        id: validate_gzipped_json
        run: |
          invalid_gzip_files=""
          invalid_gzipped_json_files=""
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.ExportJson.gz ]]; then
              temp_file="tmp.json"
              if gzip -d < "$file" > "$temp_file" 2>/dev/null; then
                if ! jq empty "$temp_file" 2>/dev/null; then
                  NEWLINE=$'\n'
                  invalid_gzipped_json_files="$invalid_gzipped_json_files$NEWLINE$file"
                fi
              else
                NEWLINE=$'\n'
                invalid_gzip_files="$invalid_gzip_files$NEWLINE$file"
              fi
              rm -f "$temp_file"
            fi
          done

          if [ -n "$invalid_gzip_files" ]; then
            {
              echo 'INVALID_FILES_GZIP<<EOF'
              echo "$invalid_gzip_files"
              echo EOF
            } >> "$GITHUB_ENV"
            echo "Found invalid GZIP files"
            echo "is_gzip_valid=false" >> $GITHUB_OUTPUT
          else
            echo "is_gzip_valid=true" >> $GITHUB_OUTPUT
          fi

          if [ -n "$invalid_gzipped_json_files" ]; then
            {
              echo 'INVALID_FILES_GZIPPED_JSON<<EOF'
              echo "$invalid_gzipped_json_files"
              echo EOF
            } >> "$GITHUB_ENV"
            echo "Found invalid gzipped JSON files"
            echo "is_gzipped_json_valid=false" >> $GITHUB_OUTPUT
          else
            echo "is_gzipped_json_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Fail if any validation failed
        run: |
          if [[ "${{ steps.validate_json.outputs.is_json_valid }}" == "false" || \
                "${{ steps.validate_xml.outputs.is_xml_valid }}" == "false" || \
                "${{ steps.validate_xml.outputs.is_gzip_valid }}" == "false" || \
                "${{ steps.validate_gzipped_json.outputs.is_gzipped_json_valid }}" == "false" ]]; then
            exit 1
          fi

      - name: Post Comment on PR for Invalid Files
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const invalidFilesJson = process.env.INVALID_FILES_JSON;
            const invalidFilesXml = process.env.INVALID_FILES_XML;
            const invalidFilesGzip = process.env.INVALID_FILES_GZIP;
            const invalidFilesGzippedJson = process.env.INVALID_FILES_GZIPPED_JSON;

            let message = '';
            if (invalidFilesJson) {
              message += `## :warning: Invalid JSON files found:\n\`\`\`r${invalidFilesJson}\n\`\`\`\n`;
            }
            if (invalidFilesXml) {
              message += `## :warning: Invalid XML files found:\n\`\`\`r${invalidFilesXml}\n\`\`\`\n`;
            }
            if (invalidFilesGzip) {
              message += `## :warning: Invalid GZIP files found:\n\`\`\`r${invalidFilesGzip}\n\`\`\`\n`;
            }
            if (invalidFilesGzippedJson) {
              message += `## :warning: Invalid gzipped JSON files found:\n\`\`\`r${invalidFilesGzippedJson}\n\`\`\`\n`;
            }

            message && github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });

  optimize-and-commit:
    runs-on: ubuntu-latest
    needs: validate-files
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils zopfli jpegoptim 

      - name: Get Changed Files
        id: changed_files
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/base
          CHANGED_FILES=$(git diff --name-only origin/base...${{ github.sha }} | tr '\n' ' ')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Minify JSON Files
        if: contains(steps.changed_files.outputs.files, '.json')
        run: |
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.json ]]; then
              minified=$(jq -c . "$file")
              echo "$minified" > "$file"
            fi
          done

      - name: Minify XML Files
        if: contains(steps.changed_files.outputs.files, '.plist')
        run: |
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.plist ]]; then
              minified=$(xmllint --noblanks "$file")
              echo "$minified" > "$file"
            fi
          done

      - name: Optimize gzipped JSON Files
        if: contains(steps.changed_files.outputs.files, '.ExportJson.gz')
        run: |
          for file in ${{ steps.changed_files.outputs.files }}; do
            if [[ "$file" == *.ExportJson.gz ]]; then
              gzip -d "$file"
              json_file="${file%.gz}"
              minified=$(jq -c . "$json_file")
              echo "$minified" > "$json_file"
              zopfli --i64 "$json_file"
              rm "$json_file"
            fi
          done

      - name: Optimize PNG files
        if: contains(steps.changed_files.outputs.files, '.png')
        run: |
          parallel -j0 zopflipng -y --iterations=64 --filters=01234mepb --lossy_8bit --lossy_transparent "{}" "{}" ::: $(echo "${{ steps.changed_files.outputs.files }}" | grep -o '[^ ]*\.png' | tr '\n' ' ')

      - name: Optimize JPEG files
        if: contains(steps.changed_files.outputs.files, '.jpg')
        run: |
          parallel -j0 jpegoptim --strip-all --all-progressive ::: $(echo "${{ steps.changed_files.outputs.files }}" | grep -o '[^ ]*\.jpg' | tr '\n' ' ')

      - name: Commit changes and push
        if: |
          contains(steps.changed_files.outputs.files, '.json') ||
          contains(steps.changed_files.outputs.files, '.plist') ||
          contains(steps.changed_files.outputs.files, '.ExportJson.gz') ||
          contains(steps.changed_files.outputs.files, '.png') ||
          contains(steps.changed_files.outputs.files, '.jpg')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "Sudachi"
          git config user.email "sudachi@cirno.name"

          if git ls-files --modified | grep '\.json'; then
            git add '*.json'
            git commit -m "optimize JSON files"
          fi

          if git ls-files --modified | grep '\.plist'; then
            git add '*.plist'
            git commit -m "optimize XML files"
          fi

          if git ls-files --modified | grep '\.ExportJson.gz'; then
            git add '*.ExportJson.gz'
            git commit -m "optimize gzipped JSON files"
          fi

          if git ls-files --modified | grep '\.png'; then
            git add '*.png'
            git commit -m "optimize PNG files"
          fi

          if git ls-files --modified | grep '\.jpg'; then
            git add '*.jpg'
            git commit -m "optimize JPEG files"
          fi

          git push origin HEAD:${{ github.event.pull_request.head.ref }}
